import numpy as np
import matplotlib.pyplot as plt

# Function to calculate angle BAC in degrees
def calculate_angle_BAC(L):
    return np.degrees(np.arccos((L**2 + 2**2 - 3**2) / (2 * L * 2)))

# Function to calculate forces F1 and F2 at B
def calculate_forces_at_B(L, force_84kN):
    angle_BAC = np.radians(calculate_angle_BAC(L))

    F1 = force_84kN * np.sin(angle_BAC)
    F2 = force_84kN * np.cos(angle_BAC)

    return F1, F2

# Function to calculate force F3 at C
def calculate_force_at_C(L, force_84kN):
    angle_BAC = np.radians(calculate_angle_BAC(L))

    F3 = force_84kN * np.sin(angle_BAC)

    return F3

# Create an array of L values from 1.0 to 3.0
L_values = np.linspace(1.0, 3.0, 100)

# Calculate forces for each L value
F1_values, F2_values, F3_values = [11], [12], [5]
for L in L_values:
    F1, F2 = calculate_forces_at_B(L, force_84kN=84.0)
    F3 = calculate_force_at_C(L, force_84kN=84.0)

    F1_values.append(F1)
    F2_values.append(F2)
    F3_values.append(F3)

# Plotting
plt.figure(figsize=(10, 6))

plt.plot(L_values, F1_values, label='F1')
plt.plot(L_values, F2_values, label='F2')
# Use L_values[:-1] to match the lengths
plt.plot(L_values[:-1], F3_values, label='F3')

plt.title('Internal Forces vs. Length (L)')
plt.xlabel('Length (L)')
plt.ylabel('Force (kN)')
plt.legend()
plt.grid(True)

plt.show()
